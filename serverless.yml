service: data-api

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: production
  timeout: 30
  environment:
    VALUES_TABLE: "${self:service}-${opt:stage, self:provider.stage}-values"
    GROUPS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-groups"
    USERS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-users"
    KEYS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-keys"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - production
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  listGroups:
    handler: index.listGroups
    events:
      - http:
          path: groups
          method: get
          cors: true
  createGroup:
    handler: index.createGroup
    events:
      - http:
          path: groups
          method: post
          cors: true
  getGroup:
    handler: index.getGroup
    events:
      - http:
          path: groups/{groupId}
          method: get
          cors: true
  updateGroup:
    handler: index.updateGroup
    events:
      - http:
          path: groups/{groupId}
          method: put
          cors: true
  createMetrics:
    handler: index.createMetrics
    events:
      - http:
          path: groups/{groupId}/metrics
          method: post
          cors: true
  getMetric:
    handler: index.getMetric
    memorySize: 128
    description: Main handler for data api
    events:
      - http:
          path: groups/{groupId}/metrics/{metricId}
          method: get
          cors: true

resources:
  Resources:
    ValuesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: groupId
            AttributeType: S
          -
            AttributeName: metricTime
            AttributeType: S
        KeySchema:
          -
            AttributeName: groupId
            KeyType: HASH
          - AttributeName: metricTime
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.VALUES_TABLE}
    GroupsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.GROUPS_TABLE}
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.USERS_TABLE}
